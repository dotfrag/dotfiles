# interpreter for shell commands
set shell bash

# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
set shellopts '-eu'

# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
set ifs "\n"

# show hidden files
set hidden true
# setlocal ~ hidden false

# enable icons
set icons

# show borders
set drawbox

# leave some space at the top and the bottom of the screen
set scrolloff 5

# # use the `dim` attribute instead of underline for the cursor in the preview pane
# set cursorpreviewfmt "\033[7m"

# set display info
set info size
set dircounts
map sn :set sortby natural; set info size

# bookmarks
map gd cd ~/Downloads
map gp cd ~/projects
map gP cd ~/Pictures
map gr cd ~/repos
map gt cd ~/tmp
map gT cd /tmp

# use enter for shell commands
map <enter> shell

# show the result of execution of previous commands
map ` !true

# execute current file (must be executable)
map x $$f
map X !$f

# dedicated keys for file opener actions
map o &mimeopen $f
map O $mimeopen --ask $f

# filter
map zf filter

# move to next/previous sibling directory
map J :updir; set dironly true; down; set dironly false; open
map K :updir; set dironly true; up; set dironly false; open

# file previewer (ctpv)
set previewer ctpv
set cleaner ctpvclear
&ctpv -s $id
&ctpvquit $id

# eza can be used to provide the file information shown in the bottom left corner
cmd on-select &{{
  lf -remote "send $id set statfmt \"$(eza -ld --color=always "$f")\""
}}

# define a custom 'open' command
# This command is called when current file is not a directory. You may want to
# use either file extensions and/or mime types here. Below uses an editor for
# text files and a file opener for the rest.
cmd open &{{
  case $(file --mime-type -Lb $f) in
    text/*) lf -remote "send $id \$$EDITOR \$fx";;
    *) for f in $fx; do $OPENER $f > /dev/null 2> /dev/null & done;;
  esac
}}

# custom mkdir command
cmd mkdir %{{
    IFS=" "
    mkdir -p -- "$*"
    lf -remote "send $id select \"$*\""
}}
map a push :mkdir<space>

# custom touch command
cmd touch %{{
    IFS=" "
    touch -- "$*"
    lf -remote "send $id select \"$*\""
}}
map A push :touch<space>

# define a custom 'rename' command without prompt for overwrite
# cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1
# map r push :rename<space>

# make sure trash folder exists
%mkdir -p $XDG_DATA_HOME/trash

# move current file or selected files to trash folder
# (also see 'man mv' for backup/overwrite options)
cmd trash %set -f; mv $fx $XDG_DATA_HOME/trash

# define a custom 'delete' command
# cmd delete ${{
#     set -f
#     printf "$fx\n"
#     printf "delete?[y/n]"
#     read ans
#     [ "$ans" = "y" ] && rm -rf $fx
# }}

# use '<delete>' key for either 'trash' or 'delete' command
map <delete> trash
# map <delete> delete
map D delete

# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
cmd extract ${{
  set -f
  case $f in
    *.tar.bz|*.tar.bz2) mkdir ${f%.*.*} && tar xjvf $f -C ${f%.*.*} ;;
    *.tar.gz)           mkdir ${f%.*.*} && tar xzvf $f -C ${f%.*.*} ;;
    *.tar.xz)           mkdir ${f%.*.*} && tar xJvf $f -C ${f%.*.*} ;;
    *.tbz|*.tbz2)       mkdir ${f%.*}   && tar xjvf $f -C ${f%.*}   ;;
    *.tgz)              mkdir ${f%.*}   && tar xzvf $f -C ${f%.*}   ;;
    *.txz)              mkdir ${f%.*}   && tar xJvf $f -C ${f%.*}   ;;
    *.7z) 7z x $f -o${f%.*} ;;
    *.rar) unrar x $f ${f%.*} ;;
    *.zip) unzip $f -d ${f%.*} ;;
    *.zst) zstd -d $f --output-dir-mirror ${f%.*} ;;
  esac
}}

# compress current file or selected files with tar and gunzip
cmd tar ${{
  set -f
  mkdir $1
  cp -r $fx $1
  tar czf $1.tar.gz $1
  rm -rf $1
}}

# compress current file or selected files with zip
cmd zip ${{
  set -f
  mkdir $1
  cp -r $fx $1
  zip -r $1.zip $1
  rm -rf $1
}}

# zoxide
cmd z %{{
  result="$(zoxide query --exclude $PWD $@ | sed 's/\\/\\\\/g;s/"/\\"/g')"
  lf -remote "send $id cd \"$result\""
}}
cmd zi ${{
  result="$(zoxide query -i | sed 's/\\/\\\\/g;s/"/\\"/g')"
  lf -remote "send $id cd \"$result\""
}}

# new folder with selected item(s)
cmd newdir ${{
  set -f
  printf "Directory name: "
  read newd
  mkdir -- "$newd"
  mv -- $fx "$newd"
}}
map <a-n> newdir

# bulk rename multiple files
cmd bulk-rename ${{
  old="$(mktemp)"
  new="$(mktemp)"
  if [ -n "$fs" ]; then
    fs="$(basename -a $fs)"
  else
    fs="$(ls)"
  fi
  printf '%s\n' "$fs" >"$old"
  printf '%s\n' "$fs" >"$new"
  $EDITOR "$new"
  [ "$(wc -l < "$new")" -ne "$(wc -l < "$old")" ] && exit
  paste "$old" "$new" | while IFS= read -r names; do
    src="$(printf '%s' "$names" | cut -f1)"
    dst="$(printf '%s' "$names" | cut -f2)"
    if [ "$src" = "$dst" ] || [ -e "$dst" ]; then
      continue
    fi
    mv -- "$src" "$dst"
  done
  rm -- "$old" "$new"
  lf -remote "send $id unselect"
}}

# follow symlink
cmd follow_link %{{
  lf -remote "send ${id} select '$(readlink $f)'"
}}
map gL follow_link

# y (select for copy) and P to paste soft-link
# d (select for cut) and P to paste hard-link
cmd link %{{
  set -- $(cat ~/.local/share/lf/files)
  mode="$1"
  shift
  if [ "$#" -lt 1 ]; then
    lf -remote "send $id echo no files to link"
    exit 0
  fi
  case "$mode" in
    # symbolically copy mode is indicating a soft link
    copy) ln -sr -t . -- "$@";;
    # while a move mode is indicating a hard link
    move) ln -t . -- "$@";;
  esac
  rm ~/.local/share/lf/files
  lf -remote "send clear"
}}
map P :link

# toggle preview column
cmd toggle_preview %{{
    if [ "$lf_preview" = "true" ]; then
        lf -remote "send $id :set preview false; set ratios 1:5"
    else
        lf -remote "send $id :set preview true; set ratios 1:2:3"
    fi
}}
map zp toggle_preview

# select all files or directories in the current directory
cmd select-files &{{
  get_files() {
    if [ "$lf_hidden" = 'false' ]; then
      find "$PWD" -mindepth 1 -maxdepth 1 -type f -not -name '.*' -print0
    else
      find "$PWD" -mindepth 1 -maxdepth 1 -type f -print0
    fi |
    xargs -0 printf ' %q'
  }
  lf -remote "send $id :unselect; toggle $(get_files)"
}}
cmd select-dirs &{{
  get_dirs() {
    if [ "$lf_hidden" = 'false' ]; then
      find "$PWD" -mindepth 1 -maxdepth 1 -type d -not -name '.*' -print0
    else
      find "$PWD" -mindepth 1 -maxdepth 1 -type d -print0
    fi |
    xargs -0 printf ' %q'
  }
  lf -remote "send $id :unselect; toggle $(get_dirs)"
}}
