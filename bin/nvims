#!/bin/bash
#
# Neovim config switcher, inspired by:
# https://gist.github.com/elijahmanor/b279553c0132bfad7eae23e34ceb593b
# https://github.com/Traap/dotfiles/blob/master/bash/bin/nvims

{
  \unalias command
  \unset -f command
} &>/dev/null

set -euo pipefail

SCRIPT_DIR=$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &>/dev/null && pwd)
SCRIPT_PATH="${SCRIPT_DIR}/$(basename "$0")"

# TODO: maybe use a file?
DEFAULT=LazyVim

declare -a nvim_dirs=(
  "${XDG_CONFIG_HOME:-${HOME}/.config}/nvim"
  "${XDG_DATA_HOME:-${HOME}/.local/share}/nvim"
  "${XDG_STATE_HOME:-${HOME}/.local/state}/nvim"
  "${XDG_CACHE_HOME:-${HOME}/.cache}/nvim"
)

declare -A nvim_configs=(
  [AstroNvim]="https://github.com/AstroNvim/AstroNvim"
  [Kickstart]="git@github.com:dotfrag/nvim.lua.git"
  [LazyVim]="git@github.com:dotfrag/lazyvim.nvim.git"
  [NvChad]="https://github.com/NvChad/NvChad"
)

usage() {
  # TODO: better usage
  echo "Usage: nvims [-d] [-l] [-s] [-h]"
}

select_config() {
  local config
  config=$(printf "%s\n" "${!nvim_configs[@]}" | fzf --prompt=" Neovim Config » " --height=~50% "$@")
  [[ -z ${config} ]] && exit 1
  echo "${config}"
}

clone_repository() {
  local name="$1"
  local url="$2"
  local location="${HOME}/.config/nvim-${name,,}"
  shift 2

  if [[ "${name}" = "${DEFAULT}" ]]; then
    if ! [[ -d ${HOME}/.config/nvim ]]; then
      git clone "${url}" "${HOME}/.config/nvim"
    fi
    # TODO: reorganise launch logic (see main)
    exec nvim "$@"
  fi

  if [[ "${name}" =~ AstroNvim|NvChad ]]; then
    git clone --depth 1 "${url}" "${location}"
    return
  fi

  git clone "${url}" "${location}"
}

del_config() {
  local config=$1
  if [[ "${config}" = "${DEFAULT}" ]]; then
    for nd in "${nvim_dirs[@]}"; do
      command echo rm -rf "${nd}"
    done
  else
    for nd in "${nvim_dirs[@]}"; do
      command echo rm -rf "${nd}-${config,,}"
    done
  fi
}

delete_config() {
  local selected
  selected=$(select_config -m)

  for sel in ${selected}; do
    while true; do
      read -n1 -rp "Delete ${sel} config? (y/n) " yn
      echo
      case ${yn} in
        [Yy]*)
          del_config "${sel}"
          echo "Deleted ${sel} config."
          continue 2
          ;;
        [Nn]*)
          continue 2
          ;;
      esac
    done
  done
}

list_configs() {
  # set -x
  for i in "${!nvim_configs[@]}"; do
    if [[ "${i}" = "${DEFAULT}" ]] && [[ -d "${nvim_dirs[0]}" ]]; then
      echo "[x] ${i} (default)"
    elif [[ -d "${nvim_dirs[0]}-${i,,}" ]]; then
      echo "[x] ${i}"
    else
      echo "[ ] ${i}"
    fi
  done
}

swap_default() {
  local selected
  selected=$(select_config)

  for nd in "${nvim_dirs[@]}"; do
    command mv "${nd}" "${nd}-${DEFAULT,,}"
  done

  for nd in "${nvim_dirs[@]}"; do
    command mv "${nd}-${selected,,}" "${nd}"
  done

  command sed -i "s/DEFAULT=\w\+/DEFAULT=${selected}/" "${SCRIPT_PATH}"
}

main() {
  local selected
  selected=$(select_config)

  if ! [[ -d "${HOME}/.config/nvim-${selected,,}" ]]; then
    clone_repository "${selected}" "${nvim_configs[${selected}]}" "$@"
  fi

  unset VIMINIT GVIMINIT
  exec env NVIM_APPNAME="nvim-${selected,,}" nvim "$@"
}

while getopts 'dlsh' option; do
  case "${option}" in
    d)
      # TODO: move entire logic into function
      # TODO: add all option (or reset?)
      delete_config
      exit
      ;;
    l)
      list_configs
      exit
      ;;
    s)
      swap_default
      exit
      ;;
    h | *)
      usage
      exit
      ;;
  esac
done

main "$@"
