#!/bin/bash

set -euo pipefail

CACHE_DIR="${XDG_CACHE_HOME:-${HOME}/.cache}/repos"
mkdir -p "${CACHE_DIR}"
cd "${CACHE_DIR}"

repos=$(gh repo list --source --limit 100 | awk '{print $1}' | sort -f)

for i in "${CACHE_DIR}"/*; do
  repo=${i##*/}
  repo=${repo%.git}
  if ! rg -q "${repo}" <<< "${repos}"; then
    echo "Repository ${repo} not found in remote."
    echo "I'm exiting, please handle manually and rerun."
    exit 1
  fi
done

new_repos=()
for i in ${repos}; do
  if ! [[ -d ${i#*/}.git ]]; then
    new_repos+=("${i}")
  fi
done
if [[ ${#new_repos[@]} -gt 0 ]]; then
  echo "Cloning new repos.."
  parallel git clone --mirror git@github.com:{} ::: "${new_repos[@]}"
  echo
fi

echo "Updating existing repos.."
parallel --tag git -C {} remote update --prune ::: "$(fd -td -d1)"
parallel --tag git -C {} gc --prune ::: "$(fd -td -d1)"
echo

cd ..

echo "Archiving repos.."
tar cf repos.tar repos
echo

echo "Compressing repos.."
zstd -T0 --ultra -20 repos.tar
echo
du -sh repos.tar repos.tar.zst
rm repos.tar
echo

output="${HOME}/repos-$(date +%Y%m%d).tar.zst"
mv -vf repos.tar.zst "${output}"
rsync "${output}" server:backup/
