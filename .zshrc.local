# .zshrc.local

# ---------------------------------------------------------------------- EXPORTS
export EDITOR="vim"
export VISUAL=$EDITOR
export RIPGREP_CONFIG_PATH="${HOME}/.config/ripgrep/config"

# -------------------------------------------------------------------- FUNCTIONS
# change working dir in shell to last dir in lf on exit
lfd() {
  tmp="$(mktemp)"
  lf -last-dir-path="$tmp" "$@"
  if [ -f "$tmp" ]; then
    dir="$(cat "$tmp")"
    rm -f "$tmp"
    if [ -d "$dir" ]; then
      if [ "$dir" != "$(pwd)" ]; then
        cd "$dir"
      fi
    fi
  fi
}

# history grep
hgrep() {
  fc -Dlim "*$@*" 1
}

# man pages search
mans() {
  man --pager="less -p '^\s+$2'" "$1"
}

# touch executable and edit
touchx() {
  if ! [[ -e "$1" ]]; then
    echo -e "#!/bin/bash\n\n" > "$1"
  fi
  chmod +x "$1" >/dev/null
  $EDITOR + "$1"
}

# backup/restore file
bak() {
  mv -v "$1" "$1.bak"
}
ubak() {
  mv -v "$1" "${1%.bak}"
}

# ripgrep | less
rgl() {
  rg --pretty "$@" | less -RFX
}

# check if main exists and use instead of master
git_main_branch() {
  command git rev-parse --git-dir &>/dev/null || return
  local ref
  for ref in refs/{heads,remotes/{origin,upstream}}/{main,trunk,mainline,default}; do
    if command git show-ref -q --verify $ref; then
      echo ${ref:t}
      return
    fi
  done
  echo master
}

# dot commit and push
gpp() {
  if ! git remote -v | grep -q "git@github.com:dotfrag"; then
    echo "Invalid repository."
    return
  fi
  git commit -am "$(date '+%Y-%m-%d %H:%M:%S')"
  git push
}

# find branches that have modified a file
glf() {
  git log --all --source -- $1 |
    rg -o "refs/.*" |
    awk '!x[$0]++' |
    head -10 |
    xargs -I '{}' git log -1 --format='%S|%ai%x20(%ar)' '{}' -- $1 |
    sed -E 's|refs/(remotes\|tags)(/origin)?/||' |
    column -t -s '|'
}

# git log
glog() {
  selected=$(git log --oneline --decorate --color "$@" | fzf --ansi --multi --height 100% --preview-window 'down,80%' --preview 'git show -m --color {1}')
  commit=$(echo "${selected}" | awk '{print $1}')
  [[ -n "${commit}" ]] && git show -m "${commit}"
}
glogd() {
  selected=$(git log --oneline --decorate --color "$@" | fzf --ansi --multi --height 100% --preview-window 'down,80%' --preview 'git show -m --color {1} | delta')
  commit=$(echo "${selected}" | awk '{print $1}')
  [[ -n "${commit}" ]] && git show -m "${commit}"
}

# run git command for all repos in directory
gall() {
  fd -td '^\.git$' -IHL -x echo {//} | sort | xargs -I{} zsh -c "echo {} && git -C {} $* && echo"
}

# launch app and exit
launch() {
  nohup "$@" >/dev/null 2>/dev/null & disown && exit
}

# ---------------------------------------------------------------------- ALIASES
alias agi="sudo nala install"
alias aug="sudo nala update && sudo nala upgrade"
alias di="sudo dnf install"
alias dug="sudo dnf check-update && sudo dnf upgrade"

alias chmod="chmod -v"
alias chown="chown -v"
alias cp="cp -vi"
alias ln="ln -vi"
alias mv="mv -vi"
alias rm="rm -v"

alias bat="bat --theme=TwoDark"
alias colors='bash -c "$(wget -qO- https://git.io/vQgMr)"'
alias dfs="df -h | sort -n -k 5"
alias dus="du -sh * 2>/dev/null | sort -h"
alias exa="exa -l --group-directories-first"
alias files='nautilus --browser $(pwd) &>/dev/null & disown'
alias gpall="fd -td '^\.git$' -IHL -x git -C {//} pull"
alias killsigs="kill -l | tr ' ' '\n' | nl"
alias lg="lazygit"
alias ran='ranger --choosedir=/tmp/.rangerdir; LASTDIR=$(cat /tmp/.rangerdir); cd "$LASTDIR"'
alias tx="tmux has-session 2> /dev/null && tmux attach-session || start-tmux.sh"
alias update-grml-zshrc="wget --no-verbose -O ${HOME}/.zshrc https://git.grml.org/f/grml-etc-core/etc/zsh/zshrc"
alias update-kitty="curl -L https://sw.kovidgoyal.net/kitty/installer.sh | sh /dev/stdin && exit"
alias update-starship="curl -sS https://starship.rs/install.sh | sh"
alias x="simple-extract"

alias ga='git add'
alias gauth='git shortlog --summary --numbered --email'
alias gc='git commit'
alias gcl='git config --local --list'
alias gcm='gr && git checkout $(git_main_branch)'
alias gco='git checkout $(git branch | fzf)'
alias gd='git diff'
alias gdd='git diff | delta --line-numbers'
alias gdu='git diff --no-ext-diff -U0'
alias glg='git log --oneline -5'
alias gp='git pull'
alias gr='cd $(git rev-parse --show-toplevel)'
alias gs='git status'
alias gss='git status -s'

# --------------------------------------------------------------- GLOBAL ALIASES
alias -g C='|wc -l'
alias -g F='|fzf -m'
alias -g G='|rg'
alias -g L='|less'
alias -g LL='|& less -r'
alias -g TR="| tr ' ' '\n'"
alias -g X='| perl -pe "chomp if eof" | xclip -sel p -f | xclip -sel c'
alias -g XI='| fzf | tr -d "\n" | xclip -sel p -f | xclip -sel c'

# ---------------------------------------------------------------- ABBREVIATIONS
abk[f]='$(fzf)'
abk[gall]="fd -td '^\.git$' -IHL -x echo {//} | sort | xargs -I{} git -C {} "

# ---------------------------------------------------------------------- OPTIONS
setopt histexpiredupsfirst
setopt histfindnodups
setopt histignorealldups
setopt histignoredups
setopt histsavenodups
setopt nosharehistory

# -------------------------------------------------------------------------- FZF
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

export FZF_DEFAULT_OPTS="--height 35% --reverse --border --inline-info --cycle --bind \
ctrl-y:preview-up,ctrl-e:preview-down,\
ctrl-b:preview-page-up,ctrl-f:preview-page-down,\
ctrl-u:preview-half-page-up,ctrl-d:preview-half-page-down \
--color=fg:#979eab,bg:#282c34,hl:#e5c07b \
--color=fg+:#abb2bf,bg+:#393e48,hl+:#e5c07b \
--color=info:#e5c07b,prompt:#61afef,pointer:#be5046 \
--color=marker:#e06c75,spinner:#e5c97b,header:#56b6c2"

export FZF_DEFAULT_COMMAND="fd --type file --hidden --follow"
export FZF_ALT_C_COMMAND="fd --type directory . --hidden --follow"
export FZF_ALT_C_OPTS="--preview 'tree -a -L 1 -C {} | head -200'"
export FZF_CTRL_R_OPTS="--height 20%"
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"

# fe[b|d] [FUZZY PATTERN] - Open the selected file with the default editor
#   - Bypass fuzzy finder if there's only one match (--select-1)
#   - Exit if there's no match (--exit-0)
#   - [b] bat preview
#   - [d] dotfiles
fe() {
  fzf --query="$@" --multi --bind 'enter:become($EDITOR {+}),ctrl-v:become(vi {+})'
}
feb() {
  fzf --query="$@" --multi --exit-0 --height 100% --preview "bat --color=always --theme=TwoDark {}"
}
fed() {
  cat "${HOME}/.dots" | fzf --query="$@" --multi --bind 'enter:become($EDITOR {+})'
}

# fuzzy ripgrep open with line number
vg() {
  rg --color=always --line-number --no-heading --smart-case "${*:-}" |
    fzf --ansi \
        --color "hl:-1:underline,hl+:-1:underline:reverse" \
        --delimiter : \
        --preview 'bat --color=always {1} --highlight-line {2} --theme=TwoDark' \
        --preview-window 'up,60%,border-bottom,+{2}+3/3,~3' \
        --bind 'enter:become($EDITOR {1} +{2})'
}

# fuzzy ripgrep dots open with line number
vgd() {
  local files
  IFS=$'\n' local files=($(cat "${HOME}/.dots"))
  rg --color=always --line-number --no-heading --smart-case "${*:-}" "${files[@]}" |
    fzf --ansi \
        --color "hl:-1:underline,hl+:-1:underline:reverse" \
        --delimiter : \
        --preview 'bat --color=always {1} --highlight-line {2} --theme=TwoDark' \
        --preview-window 'up,60%,border-bottom,+{2}+3/3,~3' \
        --bind 'enter:become($EDITOR {1} +{2})'
}

# fkill - kill processes - list only the ones you can kill
fkill() {
  local pid
  if [ "$UID" != "0" ]; then
    pid=$(ps -f -u $UID | sed 1d | fzf -m | awk '{print $2}')
  else
    pid=$(ps -ef | sed 1d | fzf -m | awk '{print $2}')
  fi

  if [ "x$pid" != "x" ]; then
    echo $pid | xargs kill -${1:-9}
  fi
}

# command cheatsheet
cmd() {
  local _cmd
  _cmd=$(fzf --query="$1" --select-1 --exit-0 <"${HOME}/.cmds")
  [[ -n "${_cmd}" ]] && eval "${_cmd}"
}

# ---------------------------------------------------------------------- WIDGETS
list_dir() { echo; exa -a; echo; echo; zle redisplay }
zle -N list_dir
bindkey "^[l" "list_dir"

repeat-last-cmd() {
  BUFFER=$(history -n -1)
  zle clear-screen
  zle accept-line
}
zle -N repeat-last-cmd
bindkey "^[r" "repeat-last-cmd"

# ------------------------------------------------------------------------- MISC
eval "$(zoxide init zsh --cmd cd)"

# ----------------------------------------------------------------------- PROMPT
prompt off
eval "$(starship init zsh)"

# ---------------------------------------------------------------------- PLUGINS
source "${HOME}/.zsh/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh"

# ---------------------------------------------------------------- PRIVATE ZSHRC
[ -f ~/.zshrc.local.private ] && source ~/.zshrc.local.private
