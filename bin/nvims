#!/bin/bash
#
# Neovim config switcher, inspired by:
# https://github.com/Traap/nvims
# https://gist.github.com/elijahmanor/b279553c0132bfad7eae23e34ceb593b

{
  \unalias command
  \unset -f command
} &> /dev/null

set -euo pipefail

CONFIG_FILE=${XDG_CONFIG_HOME:-${HOME}/.config}/nvims/config
DEFAULT=
SHALLOW_CLONE=

declare -A NVIM_CONFIGS
declare -a NVIM_DIRS=(
  "${XDG_CONFIG_HOME:-${HOME}/.config}/nvim"
  "${XDG_DATA_HOME:-${HOME}/.local/share}/nvim"
  "${XDG_STATE_HOME:-${HOME}/.local/state}/nvim"
  "${XDG_CACHE_HOME:-${HOME}/.cache}/nvim"
)

usage() {
  cat << EOF
Neovim configuration switcher.

Usage: nvims [OPTION] [args..]

Arguments will be passed to nvim.

Options:
  -c  Clean config (cache/share/state)
  -d  Delete config
  -l  List configs
  -r  Reset (delete all configs)
  -s  Swap default config
  -u  Update plugins (except default)
  -h  Print help message
EOF
}

first_run() {
  if [[ -f ${CONFIG_FILE} ]]; then
    return
  fi

  command cat << EOF
It looks like you are running nvims for the first time.
The config file ${CONFIG_FILE} has been populated with the defaults.

EOF

  command mkdir -p "$(dirname "${CONFIG_FILE}")"
  command cat << EOF > "${CONFIG_FILE}"
default=DotVim

Nvim=git@github.com:dotfrag/nvim.git
DotVim=git@github.com:dotfrag/dotvim.git

AstroNvim=https://github.com/AstroNvim/template
Kickstart=https://github.com/nvim-lua/kickstart.nvim
LazyVim=https://github.com/LazyVim/starter
NormalNvim=https://github.com/NormalNvim/NormalNvim.git
NvChad=https://github.com/NvChad/starter

shallow_clone=AstroNvim Kickstart LazyVim NormalNvim NvChad
EOF
}

read_config_file() {
  local key value
  while read -r line; do
    if ! grep -qF = <<< "${line}"; then
      continue
    fi

    read -r key value <<< "$(echo "${line}" | awk -F'=' '{print $1 " " $2}')"
    if [[ ${key} == "default" ]]; then
      DEFAULT=${value}
    elif [[ ${key} == "shallow_clone" ]]; then
      SHALLOW_CLONE=${value}
    else
      NVIM_CONFIGS[${key}]=${value}
    fi
  done < "${CONFIG_FILE}"
}

select_config() {
  local config
  config=$(printf "%s\n" "${!NVIM_CONFIGS[@]}" | fzf --prompt=" Neovim Config » " --height=~50% "$@")
  [[ -z ${config} ]] && exit 1
  echo "${config}"
}

clean_config() {
  local selected
  selected=$(select_config -m)

  for sel in ${selected}; do
    if [[ ${sel} == "${DEFAULT}" ]]; then
      for nd in "${NVIM_DIRS[@]}"; do
        if [[ ${nd} != "${XDG_CONFIG_HOME:-${HOME}/.config}/nvim" ]]; then
          command rm -rf "${nd}"
        fi
      done
    else
      for nd in "${NVIM_DIRS[@]}"; do
        if [[ ${nd} != "${XDG_CONFIG_HOME:-${HOME}/.config}/nvim" ]]; then
          command rm -rf "${nd}-${sel,,}"
        fi
      done
    fi
    echo "Cleaned ${sel} config."
  done
}

del_config() {
  local config=$1
  if [[ ${config} == "${DEFAULT}" ]]; then
    for nd in "${NVIM_DIRS[@]}"; do
      command rm -rf "${nd}"
    done
  else
    for nd in "${NVIM_DIRS[@]}"; do
      command rm -rf "${nd}-${config,,}"
    done
  fi
  echo "Deleted ${sel} config."
}

delete_config() {
  local selected
  selected=$(select_config -m)

  for sel in ${selected}; do
    while true; do
      read -n1 -rp "Delete ${sel} config? (y/n) " yn
      echo
      case ${yn} in
        [Yy]*)
          del_config "${sel}"
          break
          ;;
        [Nn]*)
          break
          ;;
      esac
    done
    echo
  done
}

list_configs() {
  for i in "${!NVIM_CONFIGS[@]}"; do
    if [[ ${i} == "${DEFAULT}" ]] && [[ -d ${NVIM_DIRS[0]} ]]; then
      echo "[x] ${i} (default)"
    elif [[ -d "${NVIM_DIRS[0]}-${i,,}" ]]; then
      echo "[x] ${i}"
    else
      echo "[ ] ${i}"
    fi
  done
}

update_plugins() {
  for i in "${!NVIM_CONFIGS[@]}"; do
    if [[ -d "${NVIM_DIRS[0]}-${i,,}" ]]; then
      NVIM_APPNAME="nvim-${i,,}" nvim --headless "+Lazy! sync" +qa
    fi
  done
}

swap_default() {
  local selected
  selected=$(select_config)

  for nd in "${NVIM_DIRS[@]}"; do
    [[ -d ${nd} ]] && command mv "${nd}" "${nd}-${DEFAULT,,}"
  done

  for nd in "${NVIM_DIRS[@]}"; do
    [[ -d ${nd}-${selected,,} ]] && command mv "${nd}-${selected,,}" "${nd}"
  done

  command sed -i "s/default=.*/default=${selected}/" "${CONFIG_FILE}"
}

reset() {
  while true; do
    read -n1 -rp "Delete all Neovim config? (y/n) " yn
    echo
    case ${yn} in
      [Yy]*) break ;;
      [Nn]*) return ;;
    esac
  done

  for nd in "${NVIM_DIRS[@]}"; do
    command rm -rf "${nd}"
  done

  for nc in "${!NVIM_CONFIGS[@]}"; do
    for nd in "${NVIM_DIRS[@]}"; do
      command rm -rf "${nd}-${nc,,}"
    done
  done
}

main() {
  local selected url location
  selected=$(select_config)
  url=${NVIM_CONFIGS[${selected}]}
  location=${NVIM_DIRS[0]}-${selected,,}

  if [[ ${selected} == "${DEFAULT}" ]]; then
    if ! [[ -d ${HOME}/.config/nvim ]]; then
      command git clone "${url}" "${HOME}/.config/nvim"
    fi
    exec nvim "$@"
  elif ! [[ -d ${HOME}/.config/nvim-${selected,,} ]]; then
    if [[ " ${SHALLOW_CLONE} " == *" ${selected} "* ]]; then
      command git clone --depth 1 "${url}" "${location}"
    else
      command git clone "${url}" "${location}"
    fi
  fi

  unset VIMINIT GVIMINIT
  exec env NVIM_APPNAME="nvim-${selected,,}" nvim "$@"
}

first_run
read_config_file

while getopts 'cdlrsuh' option; do
  case "${option}" in
    c)
      clean_config
      exit
      ;;
    d)
      delete_config
      exit
      ;;
    l)
      list_configs
      exit
      ;;
    r)
      reset
      exit
      ;;
    s)
      swap_default
      exit
      ;;
    u)
      update_plugins
      exit
      ;;
    h | *)
      usage
      exit
      ;;
  esac
done

main "$@"
