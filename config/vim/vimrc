" Basic config
set nocompatible
set encoding=utf-8

" XDG directories
set runtimepath^=$XDG_CONFIG_HOME/vim
set runtimepath+=$XDG_DATA_HOME/vim
set runtimepath+=$XDG_CONFIG_HOME/vim/after

set packpath^=$XDG_DATA_HOME/vim,$XDG_CONFIG_HOME/vim
set packpath+=$XDG_CONFIG_HOME/vim/after,$XDG_DATA_HOME/vim/after

let g:netrw_home = $XDG_DATA_HOME."/vim"
call mkdir($XDG_DATA_HOME."/vim/spell", 'p')

set backupdir=$XDG_STATE_HOME/vim/backup | call mkdir(&backupdir, 'p')
set directory=$XDG_STATE_HOME/vim/swap   | call mkdir(&directory, 'p')
set undodir=$XDG_STATE_HOME/vim/undo     | call mkdir(&undodir,   'p')
set viewdir=$XDG_STATE_HOME/vim/view     | call mkdir(&viewdir,   'p')

if !has('nvim') | set viminfofile=$XDG_STATE_HOME/vim/viminfo | endif

" Settings: General
set autoread                      " Set to auto read when a file is changed from the outside
set backspace=indent,eol,start    " Backspace behaviour
set balloonevalterm               " Enable balloon-eval functionality
" set cursorline                    " Highlight the current line
set diffopt+=iwhite               " Ignore whitespace in diff mode
set foldmethod=manual             " Enable manual folding
set gdefault                      " By default add g flag to search/replace. Add g to toggle
set hidden                        " When a buffer is brought to foreground, remember undo history and marks
set history=500                   " Change default history (20)
set ignorecase                    " Ignore character case in search
set incsearch                     " Highlight dynamically as pattern is typed
set laststatus=2                  " Always show status line
set magic                         " Enable extended regexes
set mouse=a                       " Enable mouse in all in all modes
set nohlsearch                    " Disable search highlight
set nojoinspaces                  " Only insert single space after a '.', '?' and '!' with a join command
set noshowmode                    " Don't show the current mode (airline.vim takes care of us)
set nostartofline                 " Don't reset cursor to start of line when moving around
set nowrap                        " Do not wrap lines
set number                        " Show line numbers
set relativenumber                " Show relative numbers
set report=0                      " Show all changes
set ruler                         " Show the cursor position
set scrolloff=3                   " Start scrolling three lines before horizontal border of window
set shortmess=atI                 " Don't show the intro message when starting vim
set showcmd                       " Show keystrokes in status bar
set showtabline=2                 " Always show tab bar
set sidescrolloff=3               " Start scrolling three columns before vertical border of window
set smartcase                     " Ignore 'ignorecase' if search patter contains uppercase characters
set splitbelow                    " New window goes below
set splitright                    " New windows goes right
set timeoutlen=1000 ttimeoutlen=0 " Key timeout delay
set ttyfast                       " Send more characters at a given time
set ttymouse=sgr                  " Name of the terminal type for which mouse codes are to be recognized
set undofile                      " Persistent undo
set winminheight=0                " Allow splits to be reduced to a single line
set wrapscan                      " Searches wrap around end of file
" set ofu=syntaxcomplete#Complete " Set omni-completion method

" Settings: Indentation
set autoindent    " Copy indent from last line when starting new line
set expandtab     " Expand tabs to spaces
set shiftwidth=4  " The # of spaces for indenting
set smarttab      " At start of line, <Tab> inserts shiftwidth spaces, <Bs> deletes shiftwidth spaces
set softtabstop=4 " Number of spaces that a <Tab> counts for
set tabstop=4     " Width of a hard tabstop measured in spaces

" Settings: Formatting
set formatoptions=
set formatoptions+=1 " Break before 1-letter words
set formatoptions+=2 " Use indent from 2nd line of a paragraph
set formatoptions+=c " Format comments
set formatoptions+=l " Don't break lines that are already long
set formatoptions+=n " Recognize numbered lists
set formatoptions+=q " Format comments with gq
set formatoptions+=t " Auto-wrap text using textwidth
set formatoptions-=r " Continue comments by default
set formatoptions-=o " Make comment when using o or O from comment line

" Settings: List chars
set list listchars=tab:..,trail:_,extends:>,precedes:<,nbsp:~
set showbreak=\\

" Settings: Conceal
set conceallevel=2
set concealcursor=inc

" Settings: Wildmenu (command line completion)
set wildmode=full
set wildmenu

" Settings: Bells
set noerrorbells visualbell t_vb=
autocmd GUIEnter * set visualbell t_vb=

" Colorscheme
" https://sw.kovidgoyal.net/kitty/faq/#using-a-color-theme-with-a-background-color-does-not-work-well-in-vim
" Styled and colored underline support
let &t_AU = "\e[58:5:%dm"
let &t_8u = "\e[58:2:%lu:%lu:%lum"
let &t_Us = "\e[4:2m"
let &t_Cs = "\e[4:3m"
let &t_ds = "\e[4:4m"
let &t_Ds = "\e[4:5m"
let &t_Ce = "\e[4:0m"
" Strikethrough
let &t_Ts = "\e[9m"
let &t_Te = "\e[29m"
" Truecolor support
let &t_8f = "\e[38:2:%lu:%lu:%lum"
let &t_8b = "\e[48:2:%lu:%lu:%lum"
let &t_RF = "\e]10;?\e\\"
let &t_RB = "\e]11;?\e\\"
" Bracketed paste
let &t_BE = "\e[?2004h"
let &t_BD = "\e[?2004l"
let &t_PS = "\e[200~"
let &t_PE = "\e[201~"
" Cursor control
let &t_RC = "\e[?12$p"
let &t_SH = "\e[%d q"
let &t_RS = "\eP$q q\e\\"
let &t_SI = "\e[5 q"
let &t_SR = "\e[3 q"
let &t_EI = "\e[1 q"
let &t_VS = "\e[?12l"
" Focus tracking
let &t_fe = "\e[?1004h"
let &t_fd = "\e[?1004l"
execute "set <FocusGained>=\<Esc>[I"
execute "set <FocusLost>=\<Esc>[O"
" Window title
let &t_ST = "\e[22;2t"
let &t_RT = "\e[23;2t"

" vim hardcodes background color erase even if the terminfo file does
" not contain bce. This causes incorrect background rendering when
" using a color theme with a background color in terminals such as
" kitty that do not support background color erase.
let &t_ut=''

" and finally
set termguicolors
colorscheme catppuccin_macchiato

" fzf colors
let g:fzf_colors =
\ { 'fg':         ['fg', 'Normal'],
  \ 'bg':         ['bg', 'Normal'],
  \ 'preview-bg': ['bg', 'NormalFloat'],
  \ 'hl':         ['fg', 'Comment'],
  \ 'fg+':        ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':        ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':        ['fg', 'Statement'],
  \ 'info':       ['fg', 'PreProc'],
  \ 'border':     ['fg', 'Ignore'],
  \ 'prompt':     ['fg', 'Conditional'],
  \ 'pointer':    ['fg', 'Exception'],
  \ 'marker':     ['fg', 'Keyword'],
  \ 'spinner':    ['fg', 'Label'],
  \ 'header':     ['fg', 'Comment'] }

" Mappings
let mapleader = ' '
cnoremap w!! w !sudo tee > /dev/null %
map Q <nop>
map Y y$

" Buffers
noremap <leader>w :write<cr>
noremap <leader>W :write<bar>bd<cr>
noremap <leader>s :update<cr>
noremap <leader>x :x<cr>
noremap <leader>d :bd<cr>
noremap <leader>D :b#<bar>bd#<cr>
noremap <leader>q :q<cr>
" noremap <C-h> <C-w>h
" noremap <C-j> <C-w>j
" noremap <C-k> <C-w>k
" noremap <C-l> <C-w>l
noremap  <silent> <C-S> :update<cr>
vnoremap <silent> <C-S> <esc>:update<cr>
inoremap <silent> <C-S> <esc>:update<cr>

" Visual
nmap <leader>cc :call ColorColumnToggle()<cr>
nmap <leader>h :set hlsearch! hlsearch?<cr>
nmap <leader>z :set wrap!<cr>
nmap <leader>n nzz
nmap <leader>N Nzz
nmap cae ggcG
nmap vae ggVG
nmap dil 0d$
vnoremap < <gv
vnoremap > >gv

" Regex: Trailing spaces
nmap <leader>rt :%s/\s\+$//<cr>``

" Fzf
nmap <leader>b :Buffers<cr>
nmap <leader>f :Files<cr>
nmap <leader>l :Lines<cr>
imap <c-x><c-k> <plug>(fzf-complete-word)
imap <c-x><c-f> <plug>(fzf-complete-path)
imap <c-x><c-l> <plug>(fzf-complete-line)

" Easy align
xmap ga <plug>(EasyAlign)
nmap ga <plug>(EasyAlign)

" Jump to last position in file
autocmd BufReadPost *
    \ if line("'\"") >= 1 && line("'\"") <= line("$") && &ft !~# 'commit'
    \ |   exe "normal! g`\""
    \ | endif

" Functions
function! ColorColumnToggle()
    if &colorcolumn
        setlocal colorcolumn=0
    else
        setlocal colorcolumn=80
    endif
endfunction
