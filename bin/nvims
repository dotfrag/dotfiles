#!/bin/bash
#
# Neovim config switcher, inspired by:
# https://gist.github.com/elijahmanor/b279553c0132bfad7eae23e34ceb593b
# https://github.com/Traap/dotfiles/blob/master/bash/bin/nvims

{
  \unalias command
  \unset -f command
} &>/dev/null

set -euo pipefail

CONFIG_FILE=${XDG_CONFIG_HOME:-${HOME}/.config}/nvims/config
SHALLOW_CLONE="AstroNvim NvChad"
DEFAULT=

declare -A NVIM_CONFIGS
declare -a NVIM_DIRS=(
  "${XDG_CONFIG_HOME:-${HOME}/.config}/nvim"
  "${XDG_DATA_HOME:-${HOME}/.local/share}/nvim"
  "${XDG_STATE_HOME:-${HOME}/.local/state}/nvim"
  "${XDG_CACHE_HOME:-${HOME}/.cache}/nvim"
)

usage() {
  cat <<EOF
Neovim configuration switcher.

Usage: nvims [OPTION] [args..]

Arguments will be passed to nvim.

Options:
  -d  Delete config
  -l  List configs
  -r  Reset (delete all configs)
  -s  Swap default config
  -h  Print help message
EOF
}

first_run() {
  if [[ -f "${CONFIG_FILE}" ]]; then
    return
  fi

  cat <<EOF
Looks like you are running nvims for the first time.
The config file ${CONFIG_FILE} will be populated with the defaults.
Please run nvims again.
EOF

  mkdir -p "$(dirname "${CONFIG_FILE}")"
  cat <<EOF >"${CONFIG_FILE}"
default=LazyVim
AstroNvim=https://github.com/AstroNvim/AstroNvim
Kickstart=git@github.com:dotfrag/nvim.lua.git
LazyVim=git@github.com:dotfrag/lazyvim.nvim.git
NvChad=https://github.com/NvChad/NvChad
EOF

  exit
}

read_config_file() {
  local key value
  while read -r line; do
    if echo "${line}" | grep -qF =; then
      key=$(echo "${line}" | cut -d'=' -f1)
      value=$(echo "${line}" | cut -d'=' -f2)
      if [[ ${key} = "default" ]]; then
        DEFAULT=${value}
      else
        NVIM_CONFIGS[${key}]=${value}
      fi
    fi
  done <"${CONFIG_FILE}"
}

select_config() {
  local config
  config=$(printf "%s\n" "${!NVIM_CONFIGS[@]}" | fzf --prompt=" Neovim Config » " --height=~50% "$@")
  [[ -z ${config} ]] && exit 1
  echo "${config}"
}

del_config() {
  local config=$1
  if [[ "${config}" = "${DEFAULT}" ]]; then
    for nd in "${NVIM_DIRS[@]}"; do
      command rm -rf "${nd}"
    done
  else
    for nd in "${NVIM_DIRS[@]}"; do
      command rm -rf "${nd}-${config,,}"
    done
  fi
  echo "Deleted ${sel} config."
}

delete_config() {
  local selected
  selected=$(select_config -m)

  for sel in ${selected}; do
    while true; do
      read -n1 -rp "Delete ${sel} config? (y/n) " yn
      echo
      case ${yn} in
        [Yy]*)
          del_config "${sel}"
          continue 2
          ;;
        [Nn]*)
          continue 2
          ;;
      esac
    done
    echo
  done
}

list_configs() {
  for i in "${!NVIM_CONFIGS[@]}"; do
    if [[ "${i}" = "${DEFAULT}" ]] && [[ -d "${NVIM_DIRS[0]}" ]]; then
      echo "[x] ${i} (default)"
    elif [[ -d "${NVIM_DIRS[0]}-${i,,}" ]]; then
      echo "[x] ${i}"
    else
      echo "[ ] ${i}"
    fi
  done
}

swap_default() {
  local selected
  selected=$(select_config)

  for nd in "${NVIM_DIRS[@]}"; do
    [[ -d ${nd} ]] && command mv "${nd}" "${nd}-${DEFAULT,,}"
  done

  for nd in "${NVIM_DIRS[@]}"; do
    [[ -d ${nd}-${selected,,} ]] && command mv "${nd}-${selected,,}" "${nd}"
  done

  command sed -i "s/default=.*/default=${selected}/" "${CONFIG_FILE}"
}

reset() {
  :
}

main() {
  local selected url location
  selected=$(select_config)
  url=${NVIM_CONFIGS[${selected}]}
  location=${NVIM_DIRS[0]}-${selected,,}

  if [[ ${selected} = "${DEFAULT}" ]]; then
    if ! [[ -d ${HOME}/.config/nvim ]]; then
      git clone "${url}" "${HOME}/.config/nvim"
    fi
    # exec nvim "$@"
  elif ! [[ -d ${HOME}/.config/nvim-${selected,,} ]]; then
    if [[ ${SHALLOW_CLONE} = *"${selected}"* ]]; then
      git clone --depth 1 "${url}" "${location}"
    else
      git clone "${url}" "${location}"
    fi
  fi

  unset VIMINIT GVIMINIT
  # exec env NVIM_APPNAME="nvim-${selected,,}" nvim "$@"
}

first_run
read_config_file

while getopts 'dlsrh' option; do
  case "${option}" in
    d)
      delete_config
      exit
      ;;
    l)
      list_configs
      exit
      ;;
    s)
      swap_default
      exit
      ;;
    r)
      reset
      exit
      ;;
    h | *)
      usage
      exit
      ;;
  esac
done

main "$@"
