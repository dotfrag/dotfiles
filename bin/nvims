#!/bin/bash
#
# Neovim config switcher, inspired by:
# https://gist.github.com/elijahmanor/b279553c0132bfad7eae23e34ceb593b
# https://github.com/Traap/dotfiles/blob/master/bash/bin/nvims

SCRIPT_DIR=$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &>/dev/null && pwd)
SCRIPT_PATH="${SCRIPT_DIR}/$(basename "$0")"

# TODO: maybe use a file?
DEFAULT=LazyVim

declare -A neovim_configs=(
  [AstroNvim]="https://github.com/AstroNvim/AstroNvim"
  [Kickstart]="git@github.com:dotfrag/nvim.lua.git"
  [LazyVim]="git@github.com:dotfrag/lazyvim.nvim.git"
  [NvChad]="https://github.com/NvChad/NvChad"
)

usage() {
  # TODO: better usage
  echo "Usage: nvims [-d] [-s] [-h]"
}

clone_repository() {
  local name="$1"
  local url="$2"
  local location="${HOME}/.config/nvim-${name,,}"
  shift 2

  if [[ "${name}" = "${DEFAULT}" ]]; then
    if ! [[ -d ${HOME}/.config/nvim ]]; then
      git clone "${url}" "${HOME}/.config/nvim"
    fi
    # TODO: reorganise launch logic (see main)
    exec nvim "$@"
  fi

  if [[ "${name}" =~ AstroNvim|NvChad ]]; then
    git clone --depth 1 "${url}" "${location}"
    return
  fi

  git clone "${url}" "${location}"
}

delete_config() {
  local config=$1
  if [[ "${config}" = "${DEFAULT}" ]]; then
    rm -rf "${HOME}/.cache/nvim"
    rm -rf "${HOME}/.config/nvim"
    rm -rf "${HOME}/.local/share/nvim"
    rm -rf "${HOME}/.local/state/nvim"
  else
    rm -rf "${HOME}/.cache/nvim-${config,,}"
    rm -rf "${HOME}/.config/nvim-${config,,}"
    rm -rf "${HOME}/.local/share/nvim-${config,,}"
    rm -rf "${HOME}/.local/state/nvim-${config,,}"
  fi
}

select_config() {
  local config
  config=$(printf "%s\n" "${!neovim_configs[@]}" | fzf --prompt=" Neovim Config » " --height=~50% "$@")
  echo "${config}"
}

swap_default() {
  selected=$(select_config)
  [[ -z ${selected} ]] && exit 1

  mv -v "${HOME}/.cache/nvim" "${HOME}/.cache/nvim-${DEFAULT,,}"
  mv -v "${HOME}/.config/nvim" "${HOME}/.config/nvim-${DEFAULT,,}"
  mv -v "${HOME}/.local/share/nvim" "${HOME}/.local/share/nvim-${DEFAULT,,}"
  mv -v "${HOME}/.local/state/nvim" "${HOME}/.local/state/nvim-${DEFAULT,,}"

  mv -v "${HOME}/.cache/nvim-${selected,,}" "${HOME}/.cache/nvim"
  mv -v "${HOME}/.config/nvim-${selected,,}" "${HOME}/.config/nvim"
  mv -v "${HOME}/.local/share/nvim-${selected,,}" "${HOME}/.local/share/nvim"
  mv -v "${HOME}/.local/state/nvim-${selected,,}" "${HOME}/.local/state/nvim"

  sed -i "s/DEFAULT=\w\+/DEFAULT=${selected}/" "${SCRIPT_PATH}"
}

main() {
  if [[ ${delete_config_flag} == true ]]; then
    selected=$(select_config -m)
    [[ -z ${selected} ]] && exit 1
    for sel in ${selected}; do
      while true; do
        read -n1 -rp "Delete ${sel} config? (y/n) " yn
        echo
        case ${yn} in
          [Yy]*)
            delete_config "${sel}"
            echo "Deleted ${sel} config."
            continue 2
            ;;
          [Nn]*) continue 2 ;;
        esac
      done
    done
    return
  fi

  selected=$(select_config)
  [[ -z ${selected} ]] && exit 1

  if ! [[ -d "${HOME}/.config/nvim-${selected,,}" ]]; then
    clone_repository "${selected}" "${neovim_configs[${selected}]}" "$@"
  fi

  unset VIMINIT GVIMINIT
  exec env NVIM_APPNAME="nvim-${selected,,}" nvim "$@"
}

delete_config_flag=false
while getopts 'dsh' option; do
  case "${option}" in
    d)
      # TODO: move entire logic into function
      # TODO: add all option (or reset?)
      delete_config_flag=true
      ;;
    s)
      swap_default
      exit
      ;;
    h | *)
      usage
      exit 1
      ;;
  esac
done

main "$@"
